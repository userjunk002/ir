print("Invertd Index")
file = open("file.txt")
read = file.read()
file.seek(0)

line = 1
for word in read:
	if word == '\n':
		line += 1
print("Number of lines in file is: ", line)
array = []
for i in range(line):
	array.append(file.readline())

punc = '''!()-[]{};:'"\, <>./?@#$%^&*_~'''
for ele in read:
	if ele in punc:
		read = read.replace(ele, " ")

read=read.lower()					
from nltk.tokenize import word_tokenize
import nltk
from nltk.corpus import stopwords

for i in range(1):
	text_tokens = word_tokenize(read)

tokens_without_sw = [
	word for word in text_tokens if not word in stopwords.words()]
#%%
#print(tokens_without_sw)
dictInvIndex = {}
#%%
for i in range(line):
	check = array[i].lower()
	for item in tokens_without_sw:
		if item in check:
			if item not in dictInvIndex:
				dictInvIndex[item] = set()
			if item in dictInvIndex:
				dictInvIndex[item].add((i+1))
                
#%%/
print(dictInvIndex)
#%%/
import string

def filter_string(in_string):
        in_string = in_string .lower()
        table = str.maketrans({key: None for key in string.punctuation})
        out_string = in_string.translate(table)
        return out_string

def answer(query):
    query = query.replace(" ", "")
    neg = False
    try:
        if query[0] == '!':
            neg = True
    except IndexError:
        pass
    filt_query = filter_string(query)
    if filt_query in dictInvIndex:
        doc_ids = dictInvIndex[filt_query]
    else:
        doc_ids = []
    if neg:
        doc_ids = [ i for i in range(1,line+1) if i not in doc_ids ]
    return doc_ids


def answer_bool(query):
    or_operator = '|'
    and_operator = '&'
    clauses = query.split(and_operator)
    or_terms = clauses[0].split(or_operator)
    doc_ids = set()
    for term in or_terms:
        try:
            doc_ids.update(answer(term))
        except KeyError:
            pass
    n = len(clauses)
    for i in range(1, n):
        or_terms = clauses[i].split(or_operator)
        clause_ids = set()
        for term in or_terms:
            try:
                clause_ids.update(answer(term))
            except KeyError:
                pass
        doc_ids = doc_ids.intersection(clause_ids)
    return doc_ids


print()
query='!library & sessions | literacy'
res=answer_bool(query)
print("final result is ",res)
